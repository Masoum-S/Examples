# -*- coding: utf-8 -*-
"""
Created on Thu Jun  6 10:30:03 2024

@author: msole
"""
from gurobipy import Model, GRB, quicksum
import numpy as np


def solve_lp(c, A, b, bounds):
    model = Model()
    model.setParam('OutputFlag', 0)  # Disable Gurobi output for cleaner execution
    x = [model.addVar(vtype=GRB.CONTINUOUS, lb=bounds[i][0], ub=(GRB.INFINITY if bounds[i][1] is None else bounds[i][1])) for i in range(len(bounds))]
    model.setObjective(quicksum(c[i] * x[i] for i in range(len(c))), GRB.MINIMIZE)
    for i in range(len(A)):
        model.addConstr(quicksum(A[i][j] * x[j] for j in range(len(x))) <= b[i])
    model.optimize()
    if model.status == GRB.OPTIMAL:
        return [v.X for v in model.getVars()], model.objVal
    else:
        return None, None
    
node_counter = 0  # Global counter to label nodes uniquely

def branch_and_bound(c, A, b, bounds):
    global node_counter
    best_solution = [None, float('inf')]  # Initialize best_solution

    def recurse(bounds, depth):
        global node_counter
        node_id = node_counter
        node_counter += 1  # Increment node counter to assign a unique ID to this node

        solution, z = solve_lp(c, A, b, bounds)
        if solution is None:
            print(f"{'  '*depth}Node {node_id}: Infeasible")
            return best_solution

        print(f"{'  '*depth}Node {node_id}: Solution to Relaxation: x={np.round(solution, 6)}, z={z:.1f}")

        if all(np.isclose(solution, np.round(solution))):
            if best_solution[0] is None or z < best_solution[1]:
                print(f"{'  '*depth}Node {node_id}: --> New best integer solution found with z={z:.1f}")
                best_solution[0], best_solution[1] = solution, z
            return best_solution

        for i, val in enumerate(solution):
            if not np.isclose(val, np.round(val)):
                down_bounds = bounds[:]
                down_bounds[i] = (bounds[i][0], np.floor(val))
                print(f"{'  '*depth}Node {node_id}: Branching on x[{i}] <= {np.floor(val)}")
                recurse(down_bounds, depth + 1)

                up_bounds = bounds[:]
                up_bounds[i] = (np.ceil(val), bounds[i][1])
                print(f"{'  '*depth}Node {node_id}: Branching on x[{i}] >= {np.ceil(val)}")
                recurse(up_bounds, depth + 1)
                break  # Only branch on the first non-integer solution found

        return best_solution

    return recurse(bounds, 0)
# Define problem constants
c = [-6, -5]  # Coefficients of the objective function
A = [[3, 1], [-1, 2]]  # Coefficients matrix for inequalities
b = [11, 5]  # Right-hand side of inequalities
bounds = [(0, None), (0, None)]  # Bounds for the variables

# Solve the problem using branch-and-bound
best_solution = branch_and_bound(c, A, b, bounds)
if best_solution[0]:
    print(f"\nOptimal solution: {best_solution[0]} with objective value: {best_solution[1]:.1f}")
else:
    print("\nNo feasible integer solution found.")
    
    
